// import { useState } from "react";
// import styles from "./WheelPage.module.css";
// import api from "../../utils/api";

// export default function WheelPage() {
//   const [spinning, setSpinning] = useState(false);
//   const [rotation, setRotation] = useState(0);
//   const [result, setResult] = useState(null);
//   const [balance, setBalance] = useState(null); // –ë–∞–ª–∞–Ω—Å –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –∑—ñ—Ä–æ–∫

//   const segments = [
//     "üéü Ticket",
//     "üéü Ticket",
//     "üéü Ticket",
//     "üéü Ticket",
//     "üéü Ticket",
//     "üéü Ticket",
//     "üåü 5 Stars", // –¶–µ 5 *–≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö* –∑—ñ—Ä–æ–∫
//     "üéÅ NFT Box",
//   ];

//   const spinWheel = async () => {
//     if (spinning) return;
//     setSpinning(true);
//     setResult(null);

//     try {
//       // 1Ô∏è‚É£ –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω–≤–æ–π—Å –≤—ñ–¥ –±–µ–∫–µ–Ω–¥—É
//       const invoiceRes = await api.post("/api/wheel/create_invoice");
//       if (!invoiceRes.data.success) {
//         throw new Error(invoiceRes.data.message || "Invoice creation failed");
//       }

//       const invoiceLink = invoiceRes.data.invoice_link;

//       // 2Ô∏è‚É£ –í—ñ–¥–∫—Ä–∏—Ç–∏ Telegram –æ–ø–ª–∞—Ç—É (XTR)
//       if (window.Telegram?.WebApp) {
//         const onPayment = async (event) => {
//           // –í–∞–∂–ª–∏–≤–æ –æ–¥—Ä–∞–∑—É –∑–Ω—è—Ç–∏ —Å–ª—É—Ö–∞—á–∞, —â–æ–± –≤—ñ–Ω –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤ –¥–≤—ñ—á—ñ
//           window.Telegram.WebApp.offEvent("invoiceClosed", onPayment);

//           // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –æ–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–∞
//           if (event.status === "paid") {
//             try {
//               // 3Ô∏è‚É£ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞, –≤–∏–∫–ª–∏–∫–∞—î–º–æ /spin –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∏–∑—É
//               const res = await api.post("/api/wheel/spin");
//               const data = res.data;

//               // 4Ô∏è‚É£ –ê–Ω—ñ–º—É—î–º–æ –∫–æ–ª–µ—Å–æ
//               const index = getSegmentIndex(data.result.type);

//               const baseSpins = 360 * 5; // 5 –ø–æ–≤–Ω–∏—Ö –æ–±–µ—Ä—Ç—ñ–≤
//               const segmentAngle = 360 / segments.length; // 45 –≥—Ä–∞–¥—É—Å—ñ–≤
              
//               // –í–∫–∞–∑—ñ–≤–Ω–∏–∫ –Ω–∞ 0. –û–±–µ—Ä—Ç–∞—î–º–æ "–Ω–∞–∑–∞–¥"
//               const targetAngle = -(segmentAngle * index);
              
//               // –ù–µ–≤–µ–ª–∏–∫–∏–π –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∑—Å—É–≤ –≤ –º–µ–∂–∞—Ö —Å–µ–≥–º–µ–Ω—Ç–∞
//               const randomJitter = (Math.random() - 0.5) * (segmentAngle * 0.8);
              
//               const newRotation = baseSpins + targetAngle + randomJitter;
//               setRotation(rotation + newRotation);

//               // 5Ô∏è‚É£ –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—ñ—Å–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
//               setTimeout(() => {
//                 setResult(data.result);
//                 setBalance(data.balance); // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å *–≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö* –∑—ñ—Ä–æ–∫
//                 setSpinning(false);
//               }, 4000); // 4 —Å–µ–∫—É–Ω–¥–∏ –∞–Ω—ñ–º–∞—Ü—ñ—ó

//             } catch (spinErr) {
//               console.error("Spin error after payment:", spinErr);
//               alert("Spin failed after payment. Contact support.");
//               setSpinning(false);
//             }
//           } else {
//             // –û–ø–ª–∞—Ç–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞, "pending" –∞–±–æ "failed"
//             console.log("Payment not completed:", event.status);
//             setSpinning(false);
//           }
//         };

//         // –°–ª—É—Ö–∞—î–º–æ –ø–æ–¥—ñ—é –∑–∞–∫—Ä–∏—Ç—Ç—è —ñ–Ω–≤–æ–π—Å—É
//         window.Telegram.WebApp.onEvent("invoiceClosed", onPayment);
//         // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —ñ–Ω–≤–æ–π—Å
//         window.Telegram.WebApp.openInvoice(invoiceLink);

//       } else {
//         alert("Telegram WebApp not available");
//         setSpinning(false);
//       }
//     } catch (err) {
//       console.error(err);
//       alert(err.message || "Payment or spin error");
//       setSpinning(false);
//     }
//   };

//   const getSegmentIndex = (type) => {
//     switch (type) {
//       case "raffle_ticket":
//         // –ü–æ–≤–µ—Ä—Ç–∞—î –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å —Å–µ—Ä–µ–¥ –ø–µ—Ä—à–∏—Ö 6 —Å–µ–≥–º–µ–Ω—Ç—ñ–≤
//         return Math.floor(Math.random() * 6);
//       case "stars":
//         return 6; // 7-–π —Å–µ–≥–º–µ–Ω—Ç (—ñ–Ω–¥–µ–∫—Å 6)
//       case "nft":
//         return 7; // 8-–π —Å–µ–≥–º–µ–Ω—Ç (—ñ–Ω–¥–µ–∫—Å 7)
//       default:
//         return 0;
//     }
//   };

//   return (
//     <div className={styles.container}>
//       <h2 className={styles.title}>Wheel of Fortune</h2>

//       <div className={styles.wheelContainer}>
//         <div
//           className={`${styles.wheel} ${spinning ? styles.spinning : ""}`}
//           style={{ transform: `rotate(${rotation}deg)` }}
//         >
//           {segments.map((seg, i) => (
//             <div
//               key={i}
//               className={styles.segment}
//               style={{
//                 // 360 / 8 = 45
//                 transform: `rotate(${45 * i}deg) skewY(-45deg)`,
//               }}
//             >
//               <span>{seg}</span>
//             </div>
//           ))}
//         </div>
//         <div className={styles.pointer}></div>
//       </div>

//       <button
//         className={styles.spinButton}
//         onClick={spinWheel}
//         disabled={spinning}
//       >
//         {spinning ? "Spinning..." : "Spin (10‚≠ê)"}
//       </button>

//       {result && (
//         <div className={styles.resultBox}>
//           üéâ You won:{" "}
//           {result.type === "raffle_ticket"
//             ? "üéü 1 Ticket"
//             : result.type === "stars"
//             ? "üåü 5 Stars" // 5 –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –∑—ñ—Ä–æ–∫
//             : "üéÅ NFT Mystery Box"}
//         </div>
//       )}

//       {balance !== null && (
//         <div className={styles.balance}>‚≠ê Internal Balance: {balance}</div>
//       )}
//     </div>
//   );
// }

import React, { useState } from "react";
// eslint-disable-next-line no-unused-vars
import { motion } from "framer-motion";

import api from "../../utils/api"; // ‚ùóÔ∏è –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —à–ª—è—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π

//
// ‚ùóÔ∏è –û–°–¨ –¢–£–¢ –í–ò –ú–û–ñ–ï–¢–ï –ù–ê–õ–ê–®–¢–£–í–ê–¢–ò –ü–†–ò–ó–ò ‚ùóÔ∏è
// –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç—ñ–≤ (8) —Ç–∞ —ó—Ö 'type' –º–∞—é—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏
// –ª–æ–≥—ñ—Ü—ñ –Ω–∞ –≤–∞—à–æ–º—É –±–µ–∫–µ–Ω–¥—ñ (getSegmentIndex)
//
const segments = [
  { label: "üéü Ticket", type: "raffle_ticket", color: "linear-gradient(135deg, #0066ff, #00ccff)" },
  { label: "üéü Ticket", type: "raffle_ticket", color: "linear-gradient(135deg, #2266ff, #22ccff)" },
  { label: "üéü Ticket", type: "raffle_ticket", color: "linear-gradient(135deg, #0066ff, #00ccff)" },
  { label: "üéü Ticket", type: "raffle_ticket", color: "linear-gradient(135deg, #2266ff, #22ccff)" },
  { label: "üéü Ticket", type: "raffle_ticket", color: "linear-gradient(135deg, #0066ff, #00ccff)" },
  { label: "üéü Ticket", type: "raffle_ticket", color: "linear-gradient(135deg, #2266ff, #22ccff)" },
  { label: "üåü 5 Stars", type: "stars", color: "linear-gradient(135deg, #ffee55, #ffaa00)" },
  { label: "üéÅ NFT Box", type: "nft", color: "linear-gradient(135deg, #ff0077, #ff55cc)" },
];

export default function SpaceRaffle() {
  const [spinning, setSpinning] = useState(false);
  const [rotation, setRotation] = useState(0);
  const [result, setResult] = useState(null);
  const [balance, setBalance] = useState(null); // –ë–∞–ª–∞–Ω—Å –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –∑—ñ—Ä–æ–∫
  const [tickets, setTickets] = useState(null); // –ë–∞–ª–∞–Ω—Å –∫–≤–∏—Ç–∫—ñ–≤

  // –ó–≤—É–∫–∏ –∑ –≤–∞—à–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É
  const spinSound = new Audio("https://actions.google.com/sounds/v1/foley/spinning_coin.ogg");
  const winSound = new Audio("https://actions.google.com/sounds/v1/cartoon/clang_and_wobble.ogg");

  /**
   * –§—É–Ω–∫—Ü—ñ—è –∑ –≤–∞—à–æ—ó —Å—Ç–∞—Ä–æ—ó –ª–æ–≥—ñ–∫–∏.
   * –í–∏–∑–Ω–∞—á–∞—î —ñ–Ω–¥–µ–∫—Å —Å–µ–≥–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–µ—Ä–≤–µ—Ä–∞.
   */
  const getSegmentIndex = (type) => {
    switch (type) {
      case "raffle_ticket":
        // –ü–æ–≤–µ—Ä—Ç–∞—î –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å —Å–µ—Ä–µ–¥ –ø–µ—Ä—à–∏—Ö 6 —Å–µ–≥–º–µ–Ω—Ç—ñ–≤ (0-5)
        return Math.floor(Math.random() * 6);
      case "stars":
        return 6; // 7-–π —Å–µ–≥–º–µ–Ω—Ç
      case "nft":
        return 7; // 8-–π —Å–µ–≥–º–µ–Ω—Ç
      default:
        return 0;
    }
  };

  /**
   * –ü–æ–≤–Ω—ñ—Å—Ç—é –Ω–æ–≤–∞ –ª–æ–≥—ñ–∫–∞ spin, —â–æ –≤–∫–ª—é—á–∞—î –æ–ø–ª–∞—Ç—É XTR
   */
  const spin = async () => {
    if (spinning) return;
    setSpinning(true);
    setResult(null);

    try {
      // 1Ô∏è‚É£ –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω–≤–æ–π—Å –≤—ñ–¥ –±–µ–∫–µ–Ω–¥—É
      const invoiceRes = await api.post("/api/wheel/create_invoice");
      if (!invoiceRes.data.success) {
        throw new Error(invoiceRes.data.message || "Invoice creation failed");
      }
      const invoiceLink = invoiceRes.data.invoice_link;

      // 2Ô∏è‚É£ –í—ñ–¥–∫—Ä–∏—Ç–∏ Telegram –æ–ø–ª–∞—Ç—É (XTR)
      if (window.Telegram?.WebApp) {
        const onPayment = async (event) => {
          window.Telegram.WebApp.offEvent("invoiceClosed", onPayment);

          // 3Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –æ–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–∞
          if (event.status === "paid") {
            // –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞, –∑–∞–ø—É—Å–∫–∞—î–º–æ –∑–≤—É–∫ —Ç–∞ –∞–Ω—ñ–º–∞—Ü—ñ—é
            spinSound.currentTime = 0;
            spinSound.play();

            try {
              // 4Ô∏è‚É£ –í–∏–∫–ª–∏–∫–∞—î–º–æ /spin –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –†–ï–ê–õ–¨–ù–û–ì–û –ø—Ä–∏–∑—É
              const res = await api.post("/api/wheel/spin");
              const data = res.data; // { success, result, balance, tickets }

              // 5Ô∏è‚É£ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∞–Ω—ñ–º–∞—Ü—ñ—ó
              const prizeIndex = getSegmentIndex(data.result.type);
              const degreesPerSegment = 360 / segments.length;
              
              // –¶—ñ–ª—å–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è (—Å–µ—Ä–µ–¥–∏–Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞)
              const targetStop = (prizeIndex * degreesPerSegment) + (degreesPerSegment / 2);
              
              // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –Ω–æ–≤–µ –∞–±—Å–æ–ª—é—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è rotation
              // –ë–µ—Ä–µ–º–æ –ø–æ—Ç–æ—á–Ω–∏–π "–æ–±–µ—Ä—Ç" —Ç–∞ –¥–æ–¥–∞—î–º–æ 5 –ø–æ–≤–Ω–∏—Ö –æ–±–µ—Ä—Ç—ñ–≤
              let newAbsoluteRotation = (Math.floor(rotation / 360) * 360) + (360 * 5);
              newAbsoluteRotation += targetStop;

              // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ –º–∏ –Ω–µ –∫—Ä—É—Ç–∏–º–æ –Ω–∞–∑–∞–¥
              if (newAbsoluteRotation <= rotation) {
                newAbsoluteRotation += 360;
              }

              setRotation(newAbsoluteRotation); // framer-motion –∞–Ω—ñ–º—É—î –¥–æ —Ü—å–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è

              // 6Ô∏è‚É£ –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—ñ—Å–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
              setTimeout(() => {
                spinSound.pause();
                winSound.currentTime = 0;
                winSound.play();
                setResult(data.result);
                setBalance(data.balance);
                setTickets(data.tickets);
                setSpinning(false);
              }, 4200); // 4s –∞–Ω—ñ–º–∞—Ü—ñ—è + 0.2s –±—É—Ñ–µ—Ä

            } catch (spinErr) {
              console.error("Spin error after payment:", spinErr);
              alert("Spin failed after payment. Contact support.");
              spinSound.pause();
              setSpinning(false);
            }
          } else {
            // –û–ø–ª–∞—Ç–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞ –∞–±–æ –Ω–µ –≤–¥–∞–ª–∞—Å—è
            console.log("Payment not completed:", event.status);
            setSpinning(false);
          }
        };

        window.Telegram.WebApp.onEvent("invoiceClosed", onPayment);
        window.Telegram.WebApp.openInvoice(invoiceLink);

      } else {
        alert("Telegram WebApp not available");
        setSpinning(false);
      }
    } catch (err) {
      console.error(err);
      alert(err.message || "Payment or spin error");
      setSpinning(false);
    }
  };

  //
  // JSX –∑ –≤–∞—à–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É (–∞–ª–µ –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º–∏)
  //
  return (
    <div
      className="flex flex-col items-center justify-center min-h-screen text-white"
      style={{
        background: "radial-gradient(circle at center, #0a0026, #000010 80%)",
      }}
    >
      <h1 className="text-xl mb-4 tracking-widest text-purple-300 font-bold">
        SPACE RAFFLE
      </h1>

      <div className="relative">
        {/* –£–∫–∞–∑–∞—Ç–µ–ª—å */}
        <div
          className="absolute top-[-30px] left-1/2 transform -translate-x-1/2 z-10"
          style={{
            width: 0,
            height: 0,
            borderLeft: "12px solid transparent",
            borderRight: "12px solid transparent",
            borderBottom: "20px solid #ff00cc",
            filter: "drop-shadow(0 0 10px #ff00cc)",
          }}
        ></div>

        {/* –ö–æ–ª–µ—Å–æ */}
        <motion.div
          animate={{ rotate: rotation }}
          transition={{ duration: 4, ease: [0.33, 1, 0.68, 1] }} // 4 —Å–µ–∫—É–Ω–¥–∏ –∞–Ω—ñ–º–∞—Ü—ñ—è
          className="rounded-full overflow-hidden border-[4px] border-purple-800 shadow-[0_0_30px_rgba(120,0,255,0.7)]"
          style={{
            width: "300px",
            height: "300px",
            position: "relative",
          }}
        >
       {segments.map((p, i) => {
  const segmentAngle = 360 / segments.length; // 45 –¥–ª—è 8 —Å–µ–≥–º–µ–Ω—Ç—ñ–≤
  const skewAngle = 90 - segmentAngle; // 45 –¥–ª—è 8 —Å–µ–≥–º–µ–Ω—Ç—ñ–≤

  return (
    <div
      key={i}
      style={{
        position: "absolute",
        width: "50%",
        height: "50%",
        top: "50%",
        left: "50%",
        transformOrigin: "0% 0%",
        
        // ‚ùóÔ∏è –û–°–¨ –¢–£–¢ –ë–£–õ–ê –ü–û–ú–ò–õ–ö–ê ‚ùóÔ∏è
        // –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —É –≤–∞—Å —Ç—É—Ç –∑–≤–æ—Ä–æ—Ç–Ω—ñ –ª–∞–ø–∫–∏ `...`
        transform: `rotate(${i * segmentAngle}deg) skewY(-${skewAngle}deg)`,
        
        background: p.color,
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        fontWeight: "bold",
        color: p.type === "nft" ? "#000" : "#fff",
        textShadow: "0 0 10px rgba(255,255,255,0.6)",
      }}
    >
      {/* ‚ùóÔ∏è –¶–ï–ô SPAN –¢–ï–ñ –í–ê–ñ–õ–ò–í–ò–ô ‚ùóÔ∏è
          –í—ñ–Ω "–≤–∏—Ä—ñ–≤–Ω—é—î" —Ç–µ–∫—Å—Ç, —â–æ–± –≤—ñ–Ω –Ω–µ –±—É–≤ –∫–æ—Å–∏–º */}
      <span style={{ transform: `skewY(${skewAngle}deg) rotate(${segmentAngle / 2}deg)` }}>
        {p.label}
      </span>
    </div>
  );
})}
        </motion.div>
      </div>

      <button
        onClick={spin}
        disabled={spinning}
        className="mt-8 px-6 py-3 rounded-xl font-semibold text-lg shadow-[0_0_20px_rgba(255,0,255,0.5)] 
                 bg-gradient-to-r from-[#7a00ff] to-[#ff00cc] hover:scale-105 transition-transform"
      >
        {/* ‚ùóÔ∏è –ù–∞ –∫–Ω–æ–ø—Ü—ñ —Ü—ñ–Ω–∞ –∑ –±–µ–∫–µ–Ω–¥—É (10 XTR) */}
        {spinning ? "–ö—Ä—É—Ç–∏—Ç—å—Å—è..." : "–ö—Ä—É—Ç–∏—Ç—å (10‚≠ê)"}
      </button>

      {/* ‚ùóÔ∏è –ë–ª–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑ –≤–∞—à–æ—ó —Å—Ç–∞—Ä–æ—ó –ª–æ–≥—ñ–∫–∏ */}
      {result && (
        <p
          className="mt-6 text-2xl font-bold"
          style={{
            color: "#ffe600",
            textShadow: "0 0 20px #ff00cc",
            animation: "blink 0.5s ease-in-out infinite alternate",
          }}
        >
          –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏:{" "}
          {result.type === "raffle_ticket"
            ? "üéü 1 Ticket"
            : result.type === "stars"
            ? "üåü 5 Stars" // 5 –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –∑—ñ—Ä–æ–∫
            : "üéÅ NFT Mystery Box"}
        </p>
      )}

      {/* ‚ùóÔ∏è –ë–ª–æ–∫–∏ –±–∞–ª–∞–Ω—Å—É –∑ –≤–∞—à–æ—ó —Å—Ç–∞—Ä–æ—ó –ª–æ–≥—ñ–∫–∏ */}
      {tickets !== null && (
        <div className="mt-4 text-lg">üéü Tickets: {tickets}</div>
      )}

      {balance !== null && (
        <div className="mt-2 text-lg">‚≠ê Internal Balance: {balance}</div>
      )}

      <style>{`
        @keyframes blink {
          from { transform: scale(1); opacity: 1; }
          to { transform: scale(1.1); opacity: 0.6; }
        }
      `}</style>
    </div>
  );
}
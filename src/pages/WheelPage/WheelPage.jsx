import { useState } from "react";
import styles from "./WheelPage.module.css";
import api from "../../utils/api";

export default function WheelPage() {
  const [spinning, setSpinning] = useState(false);
  const [rotation, setRotation] = useState(0);
  const [result, setResult] = useState(null);
  const [balance, setBalance] = useState(null); // –ë–∞–ª–∞–Ω—Å –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –∑—ñ—Ä–æ–∫

  const segments = [
    "üéü Ticket",
    "üéü Ticket",
    "üéü Ticket",
    "üéü Ticket",
    "üéü Ticket",
    "üéü Ticket",
    "üåü 5 Stars", // –¶–µ 5 *–≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö* –∑—ñ—Ä–æ–∫
    "üéÅ NFT Box",
  ];

  const spinWheel = async () => {
    if (spinning) return;
    setSpinning(true);
    setResult(null);

    try {
      // 1Ô∏è‚É£ –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω–≤–æ–π—Å –≤—ñ–¥ –±–µ–∫–µ–Ω–¥—É
      const invoiceRes = await api.post("/api/wheel/create_invoice");
      if (!invoiceRes.data.success) {
        throw new Error(invoiceRes.data.message || "Invoice creation failed");
      }

      const invoiceLink = invoiceRes.data.invoice_link;

      // 2Ô∏è‚É£ –í—ñ–¥–∫—Ä–∏—Ç–∏ Telegram –æ–ø–ª–∞—Ç—É (XTR)
      if (window.Telegram?.WebApp) {
        const onPayment = async (event) => {
          // –í–∞–∂–ª–∏–≤–æ –æ–¥—Ä–∞–∑—É –∑–Ω—è—Ç–∏ —Å–ª—É—Ö–∞—á–∞, —â–æ–± –≤—ñ–Ω –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤ –¥–≤—ñ—á—ñ
          window.Telegram.WebApp.offEvent("invoiceClosed", onPayment);

          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –æ–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–∞
          if (event.status === "paid") {
            try {
              // 3Ô∏è‚É£ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞, –≤–∏–∫–ª–∏–∫–∞—î–º–æ /spin –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∏–∑—É
              const res = await api.post("/api/wheel/spin");
              const data = res.data;

              // 4Ô∏è‚É£ –ê–Ω—ñ–º—É—î–º–æ –∫–æ–ª–µ—Å–æ
              const index = getSegmentIndex(data.result.type);

              const baseSpins = 360 * 5; // 5 –ø–æ–≤–Ω–∏—Ö –æ–±–µ—Ä—Ç—ñ–≤
              const segmentAngle = 360 / segments.length; // 45 –≥—Ä–∞–¥—É—Å—ñ–≤
              
              // –í–∫–∞–∑—ñ–≤–Ω–∏–∫ –Ω–∞ 0. –û–±–µ—Ä—Ç–∞—î–º–æ "–Ω–∞–∑–∞–¥"
              const targetAngle = -(segmentAngle * index);
              
              // –ù–µ–≤–µ–ª–∏–∫–∏–π –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∑—Å—É–≤ –≤ –º–µ–∂–∞—Ö —Å–µ–≥–º–µ–Ω—Ç–∞
              const randomJitter = (Math.random() - 0.5) * (segmentAngle * 0.8);
              
              const newRotation = baseSpins + targetAngle + randomJitter;
              setRotation(rotation + newRotation);

              // 5Ô∏è‚É£ –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—ñ—Å–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
              setTimeout(() => {
                setResult(data.result);
                setBalance(data.balance); // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å *–≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö* –∑—ñ—Ä–æ–∫
                setSpinning(false);
              }, 4000); // 4 —Å–µ–∫—É–Ω–¥–∏ –∞–Ω—ñ–º–∞—Ü—ñ—ó

            } catch (spinErr) {
              console.error("Spin error after payment:", spinErr);
              alert("Spin failed after payment. Contact support.");
              setSpinning(false);
            }
          } else {
            // –û–ø–ª–∞—Ç–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞, "pending" –∞–±–æ "failed"
            console.log("Payment not completed:", event.status);
            setSpinning(false);
          }
        };

        // –°–ª—É—Ö–∞—î–º–æ –ø–æ–¥—ñ—é –∑–∞–∫—Ä–∏—Ç—Ç—è —ñ–Ω–≤–æ–π—Å—É
        window.Telegram.WebApp.onEvent("invoiceClosed", onPayment);
        // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —ñ–Ω–≤–æ–π—Å
        window.Telegram.WebApp.openInvoice(invoiceLink);

      } else {
        alert("Telegram WebApp not available");
        setSpinning(false);
      }
    } catch (err) {
      console.error(err);
      alert(err.message || "Payment or spin error");
      setSpinning(false);
    }
  };

  const getSegmentIndex = (type) => {
    switch (type) {
      case "raffle_ticket":
        // –ü–æ–≤–µ—Ä—Ç–∞—î –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å —Å–µ—Ä–µ–¥ –ø–µ—Ä—à–∏—Ö 6 —Å–µ–≥–º–µ–Ω—Ç—ñ–≤
        return Math.floor(Math.random() * 6);
      case "stars":
        return 6; // 7-–π —Å–µ–≥–º–µ–Ω—Ç (—ñ–Ω–¥–µ–∫—Å 6)
      case "nft":
        return 7; // 8-–π —Å–µ–≥–º–µ–Ω—Ç (—ñ–Ω–¥–µ–∫—Å 7)
      default:
        return 0;
    }
  };

  return (
    <div className={styles.container}>
      <h2 className={styles.title}>Wheel of Fortune</h2>

      <div className={styles.wheelContainer}>
        <div
          className={`${styles.wheel} ${spinning ? styles.spinning : ""}`}
          style={{ transform: `rotate(${rotation}deg)` }}
        >
          {segments.map((seg, i) => (
            <div
              key={i}
              className={styles.segment}
              style={{
                // 360 / 8 = 45
                transform: `rotate(${45 * i}deg) skewY(-45deg)`,
              }}
            >
              <span>{seg}</span>
            </div>
          ))}
        </div>
        <div className={styles.pointer}></div>
      </div>

      <button
        className={styles.spinButton}
        onClick={spinWheel}
        disabled={spinning}
      >
        {spinning ? "Spinning..." : "Spin (10‚≠ê)"}
      </button>

      {result && (
        <div className={styles.resultBox}>
          üéâ You won:{" "}
          {result.type === "raffle_ticket"
            ? "üéü 1 Ticket"
            : result.type === "stars"
            ? "üåü 5 Stars" // 5 –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –∑—ñ—Ä–æ–∫
            : "üéÅ NFT Mystery Box"}
        </div>
      )}

      {balance !== null && (
        <div className={styles.balance}>‚≠ê Internal Balance: {balance}</div>
      )}
    </div>
  );
}
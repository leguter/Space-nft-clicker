// // eslint-disable-next-line no-unused-vars
// import { motion } from "framer-motion";
// import styles from "./EarnPage.module.css";

// export default function EarnPage() {
//   return (
//     <div className={styles.Container}>
//       <div className={styles.card}>
//         <h2 className={styles.Title}>Earn Rewards</h2>
//         <p className={styles.Description}>
//           Complete simple missions and get <span className={styles.Highlight}>Telegram Stars</span>.
//         </p>

//         <div className={styles.TaskList}>
//           <div className={styles.TaskItem}>
//             <p>Follow our Telegram Channel</p>
//             <motion.button whileTap={{ scale: 0.9 }} className={styles.BtnClaim}>
//               CLAIM
//             </motion.button>
//           </div>
//           <div className={styles.TaskItem}>
//             <p>Invite a Friend</p>
//             <motion.button whileTap={{ scale: 0.9 }} className={styles.BtnClaim}>
//               CLAIM
//             </motion.button>
//           </div>
//         </div>
//       </div>
//     </div>
//   );
// }

// EarnPage.js
// EarnPage.js
import { useState, useEffect } from "react"; // üëà –î–æ–¥–∞–π—Ç–µ useEffect
// eslint-disable-next-line no-unused-vars
import { Link } from "react-router-dom";
// eslint-disable-next-line no-unused-vars
import { motion } from "framer-motion";
import styles from "./EarnPage.module.css";
import api from "../../utils/api";
const TELEGRAM_CHANNEL_URL = "https://t.me/SpaceClicker";

export default function EarnPage() {
  const [isClaiming, setIsClaiming] = useState(false);
  const [isCompleted, setIsCompleted] = useState(false);
  const [error, setError] = useState(null);

  // ‚ú® –ö–†–û–ö 2: –î–û–î–ê–Ñ–ú–û useEffect –î–õ–Ø –ü–ï–†–ï–í–Ü–†–ö–ò –°–¢–ê–¢–£–°–£ –ü–†–ò –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ü
  useEffect(() => {
    const fetchTaskStatus = async () => {
      try {
        const response = await api.get("/api/user/tasks");
        const { completedTasks } = response.data;
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –Ω–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è —É —Å–ø–∏—Å–∫—É –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö
        if (completedTasks.includes("follow_telegram_channel")) {
          setIsCompleted(true);
        }
      } catch (err) {
        console.error("Failed to fetch task statuses:", err);
      }
    };

    fetchTaskStatus();
  }, []); // üëà –ü–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤ –æ–∑–Ω–∞—á–∞—î, —â–æ –µ—Ñ–µ–∫—Ç –≤–∏–∫–æ–Ω–∞—î—Ç—å—Å—è –ª–∏—à–µ —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ

const handleClaim = async () => {
  // 1Ô∏è‚É£ –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –∫–∞–Ω–∞–ª —É –Ω–æ–≤—ñ–π –≤–∫–ª–∞–¥—Ü—ñ Telegram
  window.open(TELEGRAM_CHANNEL_URL, "_blank");

  // 2Ô∏è‚É£ –ß–µ–∫–∞—î–º–æ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å—Ç–∏–≥ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å
  setIsClaiming(true);
  setError(null);

  setTimeout(async () => {
    try {
      // 3Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –±–µ–∫–µ–Ω–¥
      const response = await api.post("/api/user/claim/subscription", {});
      console.log("Success:", response.data.message);
      setIsCompleted(true);
    } catch (err) {
      const errorMessage = err.response?.data?.message || "Something went wrong.";
      console.error("Claim error:", errorMessage);
      setError(errorMessage);
      setTimeout(() => setError(null), 3000);
    } finally {
      setIsClaiming(false);
    }
  }, 3000); // –º–æ–∂–Ω–∞ –∑–±—ñ–ª—å—à–∏—Ç–∏ –¥–æ 5 —Å–µ–∫—É–Ω–¥, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
};

  const getButtonText = () => {
    if (isCompleted) return "COMPLETED";
    if (isClaiming) return "CHECKING...";
    if (error) return "TRY AGAIN";
    return "CLAIM";
  };

  return (
    <div className={styles.Container}>
      {/* ... –≤–∞—à–∞ JSX —Ä–æ–∑–º—ñ—Ç–∫–∞ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω ... */}
      <div className={styles.card}>
        <h2 className={styles.Title}>Earn Rewards</h2>
        <p className={styles.Description}>
          Complete simple missions and get awesome rewards!
        </p>

        <div className={styles.TaskList}>
          <div className={styles.TaskItem}>
            <div>
              <p>Follow our Telegram Channel</p>
              {error && <p className={styles.ErrorText}>{error}</p>}
            </div>
            <motion.button
              whileTap={{ scale: 0.9 }}
              className={`${styles.BtnClaim} ${isCompleted ? styles.BtnCompleted : ''}`}
              onClick={handleClaim}
              disabled={isClaiming || isCompleted}
            >
              {getButtonText()}
            </motion.button>
          </div>
          <div className={styles.TaskItem}>
              <p>Try your luck</p>
              {error && <p className={styles.ErrorText}>{error}</p>}
          
            <Link to="/wheel">
           <motion.button
              whileTap={{ scale: 0.9 }}
              className={`${styles.BtnClaim}`}
              // onClick={1}
              disabled={isClaiming || isCompleted}
            >
              üé° Wheel
            </motion.button>
            </Link>
          
</div>
        </div>
      </div>
    </div>
  );
}

import { useState, useEffect } from "react";
import api from "../../utils/api";
import styles from "./DepositPage.module.css";

export default function DepositPage() {
  const [loading, setLoading] = useState(false);
  const [selected, setSelected] = useState(null);
  const [message, setMessage] = useState("");
  const [balance, setBalance] = useState(0);

  const depositOptions = [
    { amount: 1, bonus: 0 },
    { amount: 50, bonus: 0 },
    { amount: 100, bonus: 20 },
    { amount: 500, bonus: 100 },
    { amount: 1000, bonus: 300 },
  ];

  // === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É ===
  useEffect(() => {
    const fetchBalance = async () => {
      try {
        const res = await api.get("/api/user/me");
        if (res.data?.user) setBalance(res.data.user.internal_stars || 0);
      } catch (err) {
        console.error(err);
      }
    };
    fetchBalance();
  }, []);

  // === –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–≤–æ–π—Å—É —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É ===
  const handleDeposit = async (amount) => {
    setLoading(true);
    setSelected(amount);
    setMessage("");

    try {
      const res = await api.post("/api/deposit/create_invoice", { amount });
      if (!res.data?.success) return setMessage("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω–≤–æ–π—Å");

      const { invoice_link, payload } = res.data;
      setMessage("üí≥ –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –æ–ø–ª–∞—Ç—É...");

      if (window.Telegram?.WebApp) {
        const tg = window.Telegram.WebApp;
        tg.openInvoice(invoice_link);

        // === üü¢ –ì–û–õ–û–í–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –¢–£–¢ üü¢ ===
        // 1. –ê—Ä–≥—É–º–µ–Ω—Ç 'status' –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ –Ω–∞ 'eventData', –±–æ Telegram –Ω–∞–¥—Å–∏–ª–∞—î –æ–±'—î–∫—Ç
        const onInvoiceClosed = async (eventData) => {
          tg.offEvent("invoiceClosed", onInvoiceClosed);

          // 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–ª–µ 'status' –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –æ–±'—î–∫—Ç–∞ 'eventData'
          if (eventData.status === "paid") {
            setMessage("‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–µ—Ä–≤–µ—Ä...");

            try {
              // –í–∏–∫–ª–∏–∫–∞—î–º–æ –Ω–∞—à –±–µ–∫–µ–Ω–¥, —è–∫–∏–π –º–∏ –≤–∏–ø—Ä–∞–≤–∏–ª–∏ —Ä–∞–Ω—ñ—à–µ
              const completeRes = await api.post("/api/deposit/complete", { payload });
              
              if (completeRes.data?.success) {
                // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π –∑–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å,
                // —è–∫–∏–π –ø–æ–≤–µ—Ä–Ω—É–≤ –±–µ–∫–µ–Ω–¥ (internal_stars)
                setBalance(completeRes.data.internal_stars);
                setMessage("üí∞ –ë–∞–ª–∞–Ω—Å –æ–Ω–æ–≤–ª–µ–Ω–æ!");
              } else {
                setMessage("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ");
              }
            } catch (err) {
              console.error(err);
              setMessage("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –±–∞–ª–∞–Ω—Å");
            }
          } else {
            // –°—é–¥–∏ –ø–æ—Ç—Ä–∞–ø–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å–∏ 'cancelled', 'failed' —Ç–æ—â–æ.
            setMessage("‚ùå –û–ø–ª–∞—Ç–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞ –∞–±–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
          }
        };
        // === / –ö—ñ–Ω–µ—Ü—å –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è ===

        tg.onEvent("invoiceClosed", onInvoiceClosed);
      } else {
        window.open(invoice_link, "_blank");
        setMessage("–í—ñ–¥–∫—Ä–∏—Ç–æ —É –Ω–æ–≤–æ–º—É –≤—ñ–∫–Ω—ñ. –ë–∞–ª–∞–Ω—Å –æ–Ω–æ–≤–∏—Ç—å—Å—è –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.");
      }
    } catch (err) {
      console.error(err);
      setMessage("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —ñ–Ω–≤–æ–π—Å—É");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className={styles.Container}>
      <h2 className={styles.Title}>üí∞ Deposit Stars</h2>
      <p className={styles.Subtitle}>–¢–≤—ñ–π –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê</p>

      <div className={styles.ButtonGrid}>
        {depositOptions.map(({ amount, bonus }) => (
          <button
            key={amount}
            className={`${styles.DepositButton} ${selected === amount ? styles.Active : ""}`}
            onClick={() => handleDeposit(amount)}
            disabled={loading}
          >
            <div className={styles.Amount}>{amount} ‚≠ê</div>
            {bonus > 0 && <div className={styles.Bonus}>+{bonus} –±–æ–Ω—É—Å</div>}
          </button>
        ))}
      </div>

      {message && <p className={styles.Message}>{message}</p>}
    </div>
  );
}
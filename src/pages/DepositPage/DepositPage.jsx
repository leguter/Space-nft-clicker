import { useState, useEffect } from "react";
import api from "../../utils/api";
import styles from "./DepositPage.module.css";

export default function DepositPage() {
  const [loading, setLoading] = useState(false);
  const [selected, setSelected] = useState(null);
  const [message, setMessage] = useState("");
  const [balance, setBalance] = useState(0);

  const depositOptions = [
    { amount: 1, bonus: 0 },
    { amount: 50, bonus: 0 },
    { amount: 100, bonus: 20 },
    { amount: 500, bonus: 100 },
    { amount: 1000, bonus: 300 },
  ];

  // === –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É ===
  useEffect(() => {
    const fetchBalance = async () => {
      try {
        const res = await api.get("/api/user/me");
        if (res.data?.user) {
          setBalance(res.data.user.internal_stars || 0);
        }
      } catch (e) {
        console.error("Load balance error:", e);
      }
    };
    fetchBalance();
  }, []);

  // === –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–≤–æ–π—Å—É —Ç–∞ –æ–±—Ä–æ–±–∫–∞ –æ–ø–ª–∞—Ç–∏ ===
  const handleDeposit = async (amount) => {
    try {
      setLoading(true);
      setSelected(amount);
      setMessage("");

      // 1Ô∏è‚É£ –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ –±–µ–∫–µ–Ω–¥
      const res = await api.post("/api/deposit/create_invoice", { amount });
      if (!res.data?.success || !res.data.invoice_link || !res.data.payload) {
        setMessage("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω–≤–æ–π—Å üòï");
        return;
      }

      const { invoice_link, payload } = res.data;
      setMessage("üí≥ –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –æ–ø–ª–∞—Ç—É —É Telegram...");

      // 2Ô∏è‚É£ –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ Telegram WebApp –æ–ø–ª–∞—Ç—É
      if (window.Telegram?.WebApp) {
        const tg = window.Telegram.WebApp;
        tg.openInvoice(invoice_link);

        // 3Ô∏è‚É£ –°–ª—É—Ö–∞—î–º–æ –ø–æ–¥—ñ—é –∑–∞–∫—Ä–∏—Ç—Ç—è —ñ–Ω–≤–æ–π—Å—É
        const onInvoiceClosed = async (status) => {
          tg.offEvent("invoiceClosed", onInvoiceClosed);

          if (status === "paid") {
            setMessage("‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–∞! –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–ª–∞—Ç—ñ–∂ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ...");

            try {
              // 4Ô∏è‚É£ –ù–∞–¥—Å–∏–ª–∞—î–º–æ payload –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏
              const completeRes = await api.post("/api/deposit/complete", { payload });
              if (completeRes.data?.success) {
                setBalance(completeRes.data.internal_stars);
                setMessage("üí∞ –ë–∞–ª–∞–Ω—Å –æ–Ω–æ–≤–ª–µ–Ω–æ!");
              } else {
                setMessage("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ");
              }
            } catch (err) {
              console.error("Deposit complete error:", err);
              setMessage("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –±–∞–ª–∞–Ω—Å");
            }
          } else {
            setMessage("‚ùå –û–ø–ª–∞—Ç–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞ –∞–±–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
          }
        };

        tg.onEvent("invoiceClosed", onInvoiceClosed);
      } else {
        // fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
        window.open(invoice_link, "_blank");
        setMessage("–í—ñ–¥–∫—Ä–∏—Ç–æ —É –Ω–æ–≤–æ–º—É –≤—ñ–∫–Ω—ñ. –û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.");
      }
    } catch (err) {
      console.error("Deposit error:", err);
      setMessage("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–≤–æ–π—Å—É");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className={styles.Container}>
      <h2 className={styles.Title}>üí∞ Deposit Stars</h2>
      <p className={styles.Subtitle}>–¢–≤—ñ–π –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê</p>

      <div className={styles.ButtonGrid}>
        {depositOptions.map(({ amount, bonus }) => (
          <button
            key={amount}
            className={`${styles.DepositButton} ${selected === amount ? styles.Active : ""}`}
            onClick={() => handleDeposit(amount)}
            disabled={loading}
          >
            <div className={styles.Amount}>{amount} ‚≠ê</div>
            {bonus > 0 && <div className={styles.Bonus}>+{bonus} –±–æ–Ω—É—Å</div>}
          </button>
        ))}
      </div>

      {message && <p className={styles.Message}>{message}</p>}
    </div>
  );
}

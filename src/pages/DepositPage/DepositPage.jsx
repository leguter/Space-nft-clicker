import { useState, useEffect } from "react";
import api from "../../utils/api";
import styles from "./DepositPage.module.css";

export default function DepositPage() {
  const [loading, setLoading] = useState(false);
  const [selected, setSelected] = useState(null);
  const [message, setMessage] = useState("");
  const [balance, setBalance] = useState(0);

  const depositOptions = [
    { amount: 1, bonus: 0 },
    { amount: 50, bonus: 0 },
    { amount: 100, bonus: 20 },
    { amount: 500, bonus: 100 },
    { amount: 1000, bonus: 300 },
  ];

  // === üü¢ –ì–û–õ–û–í–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –¢–£–¢ (–í–µ—Ä—Å—ñ—è 4) üü¢ ===
  useEffect(() => {
    const fetchBalance = async () => {
      try {
        // –¶–µ–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç, —Å—É–¥—è—á–∏ –∑ –≤–∞—à–æ–≥–æ –ø–µ—Ä—à–æ–≥–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç—É,
        // –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤: [ { ... } ]
        const res = await api.get("/api/user/me");
 console.log(res.data.internal_stars)
        // 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ res.data - —Ü–µ –º–∞—Å–∏–≤ —ñ –≤—ñ–Ω –Ω–µ –ø—É—Å—Ç–∏–π
        if (Array.isArray(res.data) && res.data.length > 0) {
         
          // 2. –ë–µ—Ä–µ–º–æ internal_stars –∑ –ü–ï–†–®–û–ì–û –æ–±'—î–∫—Ç–∞ –≤ –º–∞—Å–∏–≤—ñ
          const stars = res.data[0].internal_stars;
          setBalance(stars || 0);

        } else {
          // –ü—Ä–æ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–ø—Ç–æ–º –∑–º—ñ–Ω–∏—Ç—å—Å—è –Ω–∞ —Ç—É,
          // —â–æ —É –≤–∞—à–æ–º—É –Ω–æ–≤–æ–º—É –ª–æ–∑—ñ (—Ö–æ—á–∞ —Ü–µ –º–∞–ª–æ–π–º–æ–≤—ñ—Ä–Ω–æ –¥–ª—è /api/user/me)
          if (res.data?.user?.internal_stars) {
             setBalance(res.data.user.internal_stars);
          }
        }
      } catch (err) {
        console.error("Failed to fetch balance:", err);
      }
    };
    fetchBalance();
  }, []); // –ü—É—Å—Ç–∏–π –º–∞—Å–∏–≤ = –≤–∏–∫–æ–Ω–∞—Ç–∏ 1 —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
  // === / –ö—ñ–Ω–µ—Ü—å –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è ===


  // === –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–≤–æ–π—Å—É (—Ü–µ–π –∫–æ–¥ –≤–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π) ===
  const handleDeposit = async (amount) => {
    setLoading(true);
    setSelected(amount);
    setMessage("");

    try {
      const res = await api.post("/api/deposit/create_invoice", { amount });
      if (!res.data?.success) return setMessage("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω–≤–æ–π—Å");

      const { invoice_link, payload } = res.data;
      setMessage("üí≥ –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –æ–ø–ª–∞—Ç—É...");

      if (window.Telegram?.WebApp) {
        const tg = window.Telegram.WebApp;
        tg.openInvoice(invoice_link);

        const onInvoiceClosed = async (eventData) => {
          tg.offEvent("invoiceClosed", onInvoiceClosed);

          if (eventData.status === "paid") {
            setMessage("‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–µ—Ä–≤–µ—Ä...");

            try {
              const completeRes = await api.post("/api/deposit/complete", { payload });
              if (completeRes.data?.success) {
                setBalance(completeRes.data.internal_stars);
                setMessage("üí∞ –ë–∞–ª–∞–Ω—Å –æ–Ω–æ–≤–ª–µ–Ω–æ!");
              } else {
                setMessage("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ");
              }
            } catch (err) {
              console.error(err);
              setMessage("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –±–∞–ª–∞–Ω—Å");
            }
          } else {
            setMessage("‚ùå –û–ø–ª–∞—Ç–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞ –∞–±–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
          }
        };

        tg.onEvent("invoiceClosed", onInvoiceClosed);
      } else {
        window.open(invoice_link, "_blank");
        setMessage("–í—ñ–¥–∫—Ä–∏—Ç–æ —É –Ω–æ–≤–æ–º—É –≤—ñ–∫–Ω—ñ. –ë–∞–ª–∞–Ω—Å –æ–Ω–æ–≤–∏—Ç—å—Å—è –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.");
      }
    } catch (err) {
      console.error(err);
      setMessage("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —ñ–Ω–≤–æ–π—Å—É");
    } finally {
      setLoading(false);
    }
  };

  // === –†–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–±–µ–∑ –∑–º—ñ–Ω) ===
  return (
    <div className={styles.Container}>
      <h2 className={styles.Title}>üí∞ Deposit Stars</h2>
      <p className={styles.Subtitle}>–¢–≤—ñ–π –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê</p>

      <div className={styles.ButtonGrid}>
        {depositOptions.map(({ amount, bonus }) => (
          <button
            key={amount}
            className={`${styles.DepositButton} ${selected === amount ? styles.Active : ""}`}
            onClick={() => handleDeposit(amount)}
            disabled={loading}
          >
            <div className={styles.Amount}>{amount} ‚≠ê</div>
            {bonus > 0 && <div className={styles.Bonus}>+{bonus} –±–æ–Ω—É—Å</div>}
          </button>
        ))}
      </div>

      {message && <p className={styles.Message}>{message}</p>}
    </div>
  );
}
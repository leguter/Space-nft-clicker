import { useState, useEffect } from "react";
import api from "../../utils/api";
import styles from "./DepositPage.module.css";

export default function DepositPage() {
  const [loading, setLoading] = useState(false);
  const [selected, setSelected] = useState(null);
  const [message, setMessage] = useState("");

  const depositOptions = [
    { amount: 10, bonus: 0 },
    { amount: 50, bonus: 0 },
    { amount: 100, bonus: 20 },
    { amount: 500, bonus: 100 },
    { amount: 1000, bonus: 300 },
  ];

  useEffect(() => {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Telegram WebApp
    if (window.Telegram?.WebApp) {
      window.Telegram.WebApp.ready();

      // ‚úÖ –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –ø–æ–¥—ñ—é –∑–∞–∫—Ä–∏—Ç—Ç—è —ñ–Ω–≤–æ–π—Å—É
      window.Telegram.WebApp.onEvent("invoiceClosed", (status) => {
        console.log("Invoice status:", status);
        if (status === "paid") {
          setMessage("‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–∞! –ë–∞–ª–∞–Ω—Å –±—É–¥–µ –æ–Ω–æ–≤–ª–µ–Ω–æ.");
          // –ú–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –Ω–∞ –±–µ–∫–µ–Ω–¥, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
          // await api.get("/user/me");
        } else if (status === "cancelled") {
          setMessage("‚ùå –û–ø–ª–∞—Ç—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.");
        } else {
          setMessage("‚ÑπÔ∏è –û–ø–ª–∞—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
        }
      });
    }

    // –ß–∏—Å—Ç–∏–º–æ —Å–ª—É—Ö–∞—á –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    return () => {
      if (window.Telegram?.WebApp) {
        window.Telegram.WebApp.offEvent("invoiceClosed");
      }
    };
  }, []);

  const handleDeposit = async (amount) => {
    try {
      setLoading(true);
      setSelected(amount);
      setMessage("");

      const res = await api.post("/api/deposit/create_invoice", { amount });

      if (res.data?.success && res.data.invoice_link) {
        if (window.Telegram?.WebApp) {
          window.Telegram.WebApp.openInvoice(res.data.invoice_link);
          setMessage("üí≥ –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –æ–ø–ª–∞—Ç—É —É Telegram...");
        } else {
          // fallback ‚Äî –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —É –±—Ä–∞—É–∑–µ—Ä—ñ
          window.open(res.data.invoice_link, "_blank");
          setMessage("–û–ø–ª–∞—Ç—É –≤—ñ–¥–∫—Ä–∏—Ç–æ —É –Ω–æ–≤—ñ–π –≤–∫–ª–∞–¥—Ü—ñ ‚úÖ");
        }
      } else {
        setMessage("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω–≤–æ–π—Å üòï");
      }
    } catch (err) {
      console.error("Deposit error:", err);
      setMessage("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–≤–æ–π—Å—É");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className={styles.Container}>
      <h2 className={styles.Title}>üí∞ Deposit Stars</h2>
      <p className={styles.Subtitle}>–ü–æ–ø–æ–≤–Ω–∏ —Å–≤—ñ–π –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –±–∞–ª–∞–Ω—Å ‚≠ê</p>

      <div className={styles.ButtonGrid}>
        {depositOptions.map(({ amount, bonus }) => (
          <button
            key={amount}
            className={`${styles.DepositButton} ${
              selected === amount ? styles.Active : ""
            }`}
            onClick={() => handleDeposit(amount)}
            disabled={loading}
          >
            <div className={styles.Amount}>{amount} ‚≠ê</div>
            {bonus > 0 && <div className={styles.Bonus}>+{bonus} –±–æ–Ω—É—Å</div>}
          </button>
        ))}
      </div>

      {message && <p className={styles.Message}>{message}</p>}
    </div>
  );
}

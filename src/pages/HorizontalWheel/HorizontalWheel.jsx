import { useState } from "react";
import { motion } from "framer-motion";
import api from "../../utils/api";
import styles from "./HorizontalWheel.module.css";

const segments = [
  { label: "üéÅ NFT Box", type: "nft", color: "linear-gradient(135deg, #ff0077, #ff55cc)" },
  { label: "üéü Ticket", type: "raffle_ticket", color: "linear-gradient(135deg, #0066ff, #00ccff)" },
  { label: "üåü 5 Stars", type: "stars", color: "linear-gradient(135deg, #ffee55, #ffaa00)" },
  { label: "üöÄ Boost", type: "boost", color: "linear-gradient(135deg, #00ff99, #00ffaa)" },
];


export default function HorizontalWheel() {
  const [spinning, setSpinning] = useState(false);
  const [offset, setOffset] = useState(0);
  const [result, setResult] = useState(null);

  const segmentWidth = 160;
  const totalSegments = segments.length;

  // üéØ –û–±–µ—Ä—Ç–∞–Ω–Ω—è —Å–∞–º–µ –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ–º—É —Å–µ–∫—Ç–æ—Ä—ñ
  const spinToReward = (rewardType) => {
    const matchingIndexes = segments
      .map((s, i) => (s.type === rewardType ? i : -1))
      .filter((i) => i !== -1);

    const winningIndex =
      matchingIndexes[Math.floor(Math.random() * matchingIndexes.length)];

    // –æ–±–µ—Ä—Ç–∞–Ω–Ω—è –Ω–∞ –∫—ñ–ª—å–∫–∞ –ø–æ–≤–Ω–∏—Ö –æ–±–æ—Ä–æ—Ç—ñ–≤ + –¥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
    const randomTurns = 4 + Math.random() * 2;
    const finalOffset =
      -((winningIndex + totalSegments * randomTurns) * segmentWidth);

    // ‚ö°Ô∏è –°–∫–∏–¥–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –∫–æ–ª–µ—Å–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤–∏–º —Å–ø—ñ–Ω–æ–º
    setOffset(0);
    setResult(null);

    // –¢—Ä–æ—à–∫–∏ —á–µ–∫–∞—î–º–æ, —â–æ–± Framer Motion –≤—Å—Ç–∏–≥ –æ–Ω–æ–≤–∏—Ç–∏ DOM –ø–µ—Ä–µ–¥ –∞–Ω—ñ–º–∞—Ü—ñ—î—é
    setTimeout(() => {
      setOffset(finalOffset);
    }, 50);

    // –∫–æ–ª–∏ –∞–Ω—ñ–º–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    setTimeout(() => {
      setSpinning(false);
      setResult(segments[winningIndex]);
    }, 4500);
  };

  const handleSpin = async () => {
    if (spinning) return;
    setSpinning(true);
    setResult(null);

    try {
      // 1Ô∏è‚É£ –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–≤–æ–π—Å
      const { data: invoice } = await api.post("/api/wheel/create_invoice");
      if (!invoice.success) throw new Error("Invoice creation failed");

      const link = invoice.invoice_link;

      // 2Ô∏è‚É£ –û–ø–ª–∞—Ç–∞ –≤ Telegram
      if (window.Telegram?.WebApp?.openInvoice) {
        window.Telegram.WebApp.openInvoice(link, async (status) => {
          if (status === "paid") {
            // 3Ô∏è‚É£ –ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ ‚Äî –≤–∏–∫–ª–∏–∫ –±–µ–∫–µ–Ω–¥—É –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –Ω–∞–≥–æ—Ä–æ–¥–∏
            const { data: spinData } = await api.post("/api/wheel/spin");
            if (!spinData.success) throw new Error("Spin failed");
            spinToReward(spinData.result.type);
          } else {
            setSpinning(false);
          }
        });
      } else {
        // üß™ –¢–µ—Å—Ç –±–µ–∑ Telegram (–ª–æ–∫–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º)
        console.log("‚ö†Ô∏è Telegram WebApp –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî —Ç–µ—Å—Ç–æ–≤–∏–π —Å–ø—ñ–Ω");
        const { data: spinData } = await api.post("/api/wheel/spin");
        spinToReward(spinData.result.type);
      }
    } catch (err) {
      console.error("Spin error:", err);
      setSpinning(false);
    }
  };

  return (
    <div className={styles.container}>
      <h2>üé° Wheel of Fortune</h2>

      <div className={styles.wheelWrapper}>
        <motion.div
          className={styles.wheel}
          animate={{ x: offset }}
          transition={{ duration: 4, ease: "easeOut" }}
        >
          {[...Array(8)].flatMap((_, i) =>
            segments.map((seg, idx) => (
              <div
                key={`${i}-${idx}`}
                className={styles.segment}
                style={{ background: seg.color }}
              >
                {seg.label}
              </div>
            ))
          )}
        </motion.div>

        <div className={styles.marker}>‚ñº</div>
      </div>

      <button
        onClick={handleSpin}
        disabled={spinning}
        className={styles.spinButton}
      >
        {spinning ? "Spinning..." : "Spin for 1 XTR"}
      </button>

      {result && (
        <div className={styles.result}>
          üéâ You won: <strong>{result.label}</strong>
        </div>
      )}
    </div>
  );
}

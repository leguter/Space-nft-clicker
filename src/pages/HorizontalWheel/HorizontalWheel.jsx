// import { useState } from "react";
// import { motion } from "framer-motion";
// import api from "../../utils/api";
// import styles from "./HorizontalWheel.module.css";

// // –ö–æ–∂–µ–Ω —Ç–∏–ø –ø—Ä–∏–∑—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π
// const segments = [
//   { label: "üéÅ NFT Box", type: "nft", color: "linear-gradient(135deg, #ff0077, #ff55cc)" },
//   { label: "üéü Ticket", type: "raffle_ticket", color: "linear-gradient(135deg, #0066ff, #00ccff)" },
//   { label: "üåü 5 Stars", type: "stars", color: "linear-gradient(135deg, #ffee55, #ffaa00)" },
//   { label: "üöÄ Boost", type: "boost", color: "linear-gradient(135deg, #00ff99, #00ffaa)" },
// ];

// export default function HorizontalWheel() {
//   const [spinning, setSpinning] = useState(false);
//   const [offset, setOffset] = useState(0);
//   const [result, setResult] = useState(null);

//   const segmentWidth = 160; // —à–∏—Ä–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
//   const totalSegments = segments.length;

//   // üîπ –§—É–Ω–∫—Ü—ñ—è –æ–±–µ—Ä—Ç–∞–Ω–Ω—è –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–∑—É
//   const spinToReward = (rewardType) => {
//     // –∑–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å –ø—Ä–∏–∑—É
//     const winningIndex = segments.findIndex(s => s.type === rewardType);

//     if (winningIndex === -1) {
//       console.error("–ü—Ä–∏–∑ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:", rewardType);
//       setSpinning(false);
//       return;
//     }

//     // –æ–±—á–∏—Å–ª—é—î–º–æ offset –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
//   const randomTurns = 4 + Math.floor(Math.random() * 3);
//     // (160 / 2 = 80). –¶–µ–π –∑—Å—É–≤ —Ü–µ–Ω—Ç—Ä—É—î —Å–µ–≥–º–µ–Ω—Ç –ø—ñ–¥ –º–∞—Ä–∫–µ—Ä–æ–º.
//      const centeringOffset = segmentWidth / 2; 
//  const finalOffset = -((winningIndex + totalSegments * randomTurns) * segmentWidth) + centeringOffset;

//     // —Å–∫–∏–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–ª–æ–∂–µ–Ω–Ω—è, —â–æ–± –∞–Ω—ñ–º–∞—Ü—ñ—è –ø–æ–≤—Ç–æ—Ä—é–≤–∞–ª–∞—Å—å –∫–æ—Ä–µ–∫—Ç–Ω–æ
//     setOffset(0);
//     setResult(null);

//     setTimeout(() => {
//       setOffset(finalOffset);
//     }, 50);

//     // –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
//     setTimeout(() => {
//       setSpinning(false);
//       setResult(segments[winningIndex]);
//     }, 4500);
//   };

//   // üîπ –û–±—Ä–æ–±–∫–∞ —Å–ø—ñ–Ω—É –∑ –æ–ø–ª–∞—Ç–æ—é
//   const handleSpin = async () => {
//     if (spinning) return;
//     setSpinning(true);
//     setResult(null);

//     try {
//       // 1Ô∏è‚É£ —Å—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–≤–æ–π—Å
//       const { data: invoice } = await api.post("/api/wheel/create_invoice");
//       if (!invoice.success) throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω–≤–æ–π—Å");

//       const link = invoice.invoice_link;

//       // 2Ô∏è‚É£ –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram
//       if (window.Telegram?.WebApp?.openInvoice) {
//         window.Telegram.WebApp.openInvoice(link, async (status) => {
//           if (status === "paid") {
//             // 3Ô∏è‚É£ –æ—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥ –±–µ–∫–µ–Ω–¥—É
//             const { data: spinData } = await api.post("/api/wheel/spin");
//             if (!spinData.success) throw new Error("–°–ø—ñ–Ω –Ω–µ –≤–¥–∞–≤—Å—è");

//             // 4Ô∏è‚É£ –∑–∞–ø—É—Å–∫–∞—î–º–æ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–∑—É
//             spinToReward(spinData.result.type);
//           } else {
//             setSpinning(false);
//           }
//         });
//       } else {
//         // üß™ –¢–µ—Å—Ç –±–µ–∑ Telegram
//         const { data: spinData } = await api.post("/api/wheel/spin");
//         spinToReward(spinData.result.type);
//       }
//     } catch (err) {
//       console.error("–ü–æ–º–∏–ª–∫–∞ —Å–ø—ñ–Ω—É:", err);
//       setSpinning(false);
//     }
//   };

//   return (
//     <div className={styles.container}>
//       <h2>üé° Wheel of Fortune</h2>

//       <div className={styles.wheelWrapper}>
//         <motion.div
//           className={styles.wheel}
//           animate={{ x: offset }}
//           transition={{ duration: 4, ease: "easeOut" }}
//         >
//           {[...Array(8)].flatMap((_, i) =>
//             segments.map((seg, idx) => (
//               <div
//                 key={`${i}-${idx}`}
//                 className={styles.segment}
//                 style={{ background: seg.color }}
//               >
//                 {seg.label}
//               </div>
//             ))
//           )}
//         </motion.div>

//         <div className={styles.marker}>‚ñº</div>
//       </div>

//       <button
//         onClick={handleSpin}
//         disabled={spinning}
//         className={styles.spinButton}
//       >
//         {spinning ? "Spinning..." : "Spin for 1 XTR"}
//       </button>

//       {result && (
//         <div className={styles.result}>
//           üéâ You won: <strong>{result.label}</strong>
//         </div>
//       )}
//     </div>
//   );
// }
import { useState } from "react";
// eslint-disable-next-line no-unused-vars
import { motion } from "framer-motion";
import api from "../../utils/api";
import styles from "./HorizontalWheel.module.css";

// –ö–æ–∂–µ–Ω —Ç–∏–ø –ø—Ä–∏–∑—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π
const segments = [
  { label: "üéÅ NFT Box", type: "nft", color: "linear-gradient(135deg, #ff0077, #ff55cc)" },
  { label: "üéü Ticket", type: "raffle_ticket", color: "linear-gradient(135deg, #0066ff, #00ccff)" },
  { label: "üåü 5 Stars", type: "stars", color: "linear-gradient(135deg, #ffee55, #ffaa00)" },
  { label: "üöÄ Boost", type: "boost", color: "linear-gradient(135deg, #00ff99, #00ffaa)" },
];

export default function HorizontalWheel() {
  const [spinning, setSpinning] = useState(false);
  const [result, setResult] = useState(null);

  const segmentWidth = 160;
  const totalSegments = segments.length;
  const wheelCycleLength = totalSegments * segmentWidth; // 4 * 160 = 640px
  const centeringOffset = segmentWidth / 2; // 80px

  const [offset, setOffset] = useState(0);
  const [transition, setTransition] = useState({ duration: 0, ease: "easeOut" });

  const spinToReward = (rewardType) => {
    const winningIndex = segments.findIndex((s) => s.type === rewardType);

    if (winningIndex === -1) {
      console.error("–ü—Ä–∏–∑ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:", rewardType);
      setSpinning(false);
      return;
    }

    const targetPosition = winningIndex * -segmentWidth + centeringOffset;
    const currentOffset = offset;
    const currentBaseOffset = currentOffset % wheelCycleLength;
    const randomTurns = 4 + Math.floor(Math.random() * 3);
    const spinDistance = wheelCycleLength * randomTurns;

    const finalOffset = currentOffset + (targetPosition - currentBaseOffset) - spinDistance;

    setTransition({ duration: 4, ease: "easeOut" });
    setResult(null);
    setOffset(finalOffset);

    setTimeout(() => {
      setSpinning(false);
      setResult(segments[winningIndex]);
    }, 4500);
  };

  const handleAnimationComplete = () => {
    if (transition.duration === 0) return;

    const currentBaseOffset = offset % wheelCycleLength;
    setTransition({ duration: 0 });
    setOffset(currentBaseOffset);
  };

  const handleSpin = async () => {
    if (spinning) return;
    setSpinning(true);
    setResult(null);

    try {
      const { data: invoice } = await api.post("/api/wheel/create_invoice");
      if (!invoice.success) throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω–≤–æ–π—Å");

      const link = invoice.invoice_link;

      if (window.Telegram?.WebApp?.openInvoice) {
        window.Telegram.WebApp.openInvoice(link, async (status) => {
          if (status === "paid") {
            const { data: spinData } = await api.post("/api/wheel/spin");
            if (!spinData.success) throw new Error("–°–ø—ñ–Ω –Ω–µ –≤–¥–∞–≤—Å—è");
            spinToReward(spinData.result.type);
          } else {
            setSpinning(false);
          }
        });
      } else {
        const { data: spinData } = await api.post("/api/wheel/spin");
        spinToReward(spinData.result.type);
      }
    } catch (err) {
      console.error("–ü–æ–º–∏–ª–∫–∞ —Å–ø—ñ–Ω—É:", err);
      setSpinning(false);
    }
  };

  return (
    <div className={styles.container}>
      <h2>üé° Wheel of Fortune</h2>

      <div className={styles.wheelWrapper}>
        <motion.div
          className={styles.wheel}
          animate={{ x: offset }}
          transition={transition}
          onAnimationComplete={handleAnimationComplete}
        >
          {[...Array(8)].flatMap((_, i) =>
            segments.map((seg, idx) => (
              <div
                key={`${i}-${idx}`}
                className={styles.segment}
                style={{ background: seg.color }}
              >
                {seg.label}
              </div>
            ))
          )}
        </motion.div>

        <div className={styles.marker}>‚ñº</div>
      </div>

      <button
        onClick={handleSpin}
        disabled={spinning}
        className={styles.spinButton}
      >
        {spinning ? "Spinning..." : "Spin for 10 ‚≠ê"}
      </button>

      {result && (
        <div className={styles.result}>
          üéâ You won: <strong>{result.label}</strong>
        </div>
      )}
    </div>
  );
}

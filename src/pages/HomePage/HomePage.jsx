// import { useState, useEffect } from "react";
// import { useOutletContext, Link } from "react-router-dom";
// import styles from "./HomePage.module.css";
// import { FaUserCircle } from "react-icons/fa";
// import { FiZap } from "react-icons/fi";
// import TapButton from "../../components/TapButton/TapButton";
// import api from "../../utils/api";
// import ProfileModal from "../../components/ProfileModal/ProfileModal";

// export default function HomePage() {
//   const { balance, isTapped, handleTap, tapPower } = useOutletContext();

//   const [floatingNumbers, setFloatingNumbers] = useState([]);
//   const [localProgress, setLocalProgress] = useState(0);
//   const [clicks, setClicks] = useState(0);
//    const [profileOpen, setProfileOpen] = useState(false);

//   // üß† –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å –ø—Ä–∏ –≤—Ö–æ–¥—ñ
//   useEffect(() => {
//     const fetchUser = async () => {
//       try {
//         const res = await api.get("/api/user/me", {
//           headers: { Authorization: `Bearer ${localStorage.getItem("authToken")}` },
//         });
//         // üü¢ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: –±–µ—Ä–µ–º–æ click_progress, –∞ –Ω–µ progress
//         setLocalProgress(res.data.click_progress || 0);
//       } catch (err) {
//         console.error("‚ùå Failed to load user progress:", err);
//       }
//     };
//     fetchUser();
//   }, []);

//   // ‚ö° –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É (–∞–Ω—ñ–º–∞—Ü—ñ—è + –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–µ–∫–µ–Ω–¥—É)
//   const handleTapWithAnimation = async (e) => {
//     handleTap();

//     // —Å—Ç–≤–æ—Ä—é—î–º–æ –µ—Ñ–µ–∫—Ç "–ª—ñ—Ç–∞—é—á–æ–≥–æ —á–∏—Å–ª–∞"
//     const newNumber = {
//       id: Date.now(),
//       value: tapPower,
//       x: e.clientX,
//       y: e.clientY,
//     };
//     setFloatingNumbers((curr) => [...curr, newNumber]);
//     setTimeout(() => {
//       setFloatingNumbers((curr) => curr.filter((num) => num.id !== newNumber.id));
//     }, 1000);

//     // –ª–æ–∫–∞–ª—å–Ω–æ –æ–Ω–æ–≤–ª—é—î–º–æ
//     setClicks((prev) => prev + 1);
//     setLocalProgress((prev) => Math.min(prev + 0.001, 1));

//     // –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ
//     try {
//       const res = await api.post(
//         "/api/user/update-clicks",
//         { progress: 0.001 },
//         { headers: { Authorization: `Bearer ${localStorage.getItem("authToken")}` } }
//       );

//       // üü¢ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –ø—ñ—Å–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
//       setLocalProgress(res.data.progress);
//     } catch (err) {
//       console.error("‚ùå update-clicks error:", err.response?.data?.message || err.message);
//     }
//   };

//   // üéü –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–≤–∏—Ç–æ–∫ (100%)
//   const handleClaimTicket = async () => {
//     try {
//       const res = await api.post(
//         "/api/user/claim-ticket",
//         {},
//         { headers: { Authorization: `Bearer ${localStorage.getItem("authToken")}` } }
//       );

//       alert(`üéü Ticket claimed! You now have ${res.data.tickets} tickets.`);
//       setLocalProgress(0);
//       setClicks(0);
//     } catch (err) {
//       alert(err.response?.data?.message || "Error claiming ticket");
//     }
//   };

//   const progressColor =
//     localProgress < 0.7
//       ? "#00eaff"
//       : localProgress < 0.95
//       ? "#00ff99"
//       : "#ff00ff";

//   return (
//     <div className={styles.container}>
//       <div className={styles.Card}>
//         <header className={styles.header}>
//           <h1 className={styles.title}>SPACE CLICKER</h1>
//             <div className={styles.userIcon}>
//       {/* —Ä–µ—à—Ç–∞ —Ç–≤–æ–≥–æ –∫–ª—ñ–∫–µ—Ä—É */}
//       <button width="24px" height="24px" className={styles.btnProfile} onClick={() => setProfileOpen(true)}><FaUserCircle className={styles.userIcon} /></button>
//       <ProfileModal isOpen={profileOpen} onClose={() => setProfileOpen(false)} /> 
//     </div>
//         </header>

//         <div className={styles.balance}>{balance.toLocaleString("en-US")} ‚òÖ</div>

//         <TapButton isTapped={isTapped} onClick={handleTapWithAnimation} />

//         <div
//           className={styles.progressSection}
//           onClick={() => localProgress >= 1 && handleClaimTicket()}
//           style={{ cursor: localProgress >= 1 ? "pointer" : "default" }}
//         >
//           <span className={styles.progressLabel}>PROGRESS</span>
//           <div className={styles.progressBar}>
//             <div
//               className={styles.progressFill}
//               style={{
//                 width: `${Math.min(localProgress * 100, 100)}%`,
//                 backgroundColor: progressColor,
//                 boxShadow:
//                   localProgress >= 0.95
//                     ? `0 0 20px ${progressColor}, 0 0 40px ${progressColor}`
//                     : "none",
//                 transition: "all 0.3s ease-in-out",
//               }}
//             ></div>
//           </div>
//         </div>

//         <Link to="/boosters" className={styles.boostersButton}>
//           <FiZap /> Boosters
//         </Link>
//       </div>

//       {floatingNumbers.map((num) => (
//         <div
//           key={num.id}
//           className={styles.floatingNumber}
//           style={{ left: `${num.x}px`, top: `${num.y}px` }}
//         >
//           +{num.value}
//         </div>
//       ))}
//     </div>
//   );
// }

import { useState } from "react";
import { useOutletContext, Link } from "react-router-dom";
import styles from "./HomePage.module.css";
import { FaUserCircle } from "react-icons/fa";
import { FiZap } from "react-icons/fi";
import TapButton from "../../components/TapButton/TapButton";
// ‚ùå api.js –¢–£–¢ –ë–Ü–õ–¨–®–ï –ù–ï –ü–û–¢–†–Ü–ë–ï–ù
// import api from "../../utils/api"; 
import ProfileModal from "../../components/ProfileModal/ProfileModal";

export default function HomePage() {
  // 1. üü¢ –û–¢–†–ò–ú–£–Ñ–ú–û –í–°–ï –ó MAINA, –í–ö–õ–Æ–ß–ê–Æ–ß–ò 'progress'
  const { 
    balance, 
    isTapped, 
    handleTap, // ‚¨ÖÔ∏è –ì–æ—Ç–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑ MainLayout
    tapPower,
    progress,    // ‚¨ÖÔ∏è –ì–æ—Ç–æ–≤–∏–π –ø—Ä–æ–≥—Ä–µ—Å –∑ MainLayout
    ticketReady, // ‚¨ÖÔ∏è –ì–æ—Ç–æ–≤–∏–π boolean –∑ MainLayout
    claimTicket  // ‚¨ÖÔ∏è –ì–æ—Ç–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑ MainLayout
  } = useOutletContext();

  const [floatingNumbers, setFloatingNumbers] = useState([]);
  const [profileOpen, setProfileOpen] = useState(false);

  // ‚ùå –í–ò–î–ê–õ–ï–ù–û –í–ï–°–¨ 'useEffect'
  // MainLayout –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î 'progress' –¥–ª—è –Ω–∞—Å.

  // 2. ‚ö°Ô∏è –§–£–ù–ö–¶–Ü–Ø –°–ü–†–û–©–ï–ù–ê
  const handleTapWithAnimation = (e) => {
    // 3. üü¢ –í–∏–∫–ª–∏–∫–∞—î–º–æ –¢–Ü–õ–¨–ö–ò –û–î–ù–£ —Ñ—É–Ω–∫—Ü—ñ—é –∑ MainLayout
    // –í–æ–Ω–∞ –≤–∂–µ –æ–Ω–æ–≤–ª—é—î —ñ –±–∞–ª–∞–Ω—Å, —ñ –ø—Ä–æ–≥—Ä–µ—Å –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ
    handleTap();

    // —Å—Ç–≤–æ—Ä—é—î–º–æ –µ—Ñ–µ–∫—Ç "–ª—ñ—Ç–∞—é—á–æ–≥–æ —á–∏—Å–ª–∞"
    const newNumber = {
      id: Date.now(),
      value: tapPower,
      x: e.clientX,
      y: e.clientY,
    };
    setFloatingNumbers((curr) => [...curr, newNumber]);
    setTimeout(() => {
      setFloatingNumbers((curr) => curr.filter((num) => num.id !== newNumber.id));
    }, 1000);
    
    // ‚ùå –í–ò–î–ê–õ–ï–ù–û –í–°–Æ –õ–û–ö–ê–õ–¨–ù–£ –õ–û–ì–Ü–ö–£ 'progress'
    // ‚ùå –í–ò–î–ê–õ–ï–ù–û –í–ï–°–¨ 'api.post("/api/user/update-clicks")'
  };

  // 3. üéüÔ∏è –§–£–ù–ö–¶–Ü–Ø –°–ü–†–û–©–ï–ù–ê
  const handleClaimTicket = () => {
    // –ü—Ä–æ—Å—Ç–æ –≤–∏–∫–ª–∏–∫–∞—î–º–æ –≥–æ—Ç–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é –∑ MainLayout
    claimTicket();
    
    // (–ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π alert, –∫—Ä–∞—â–µ toast, 
    // –∞–ª–µ –ª–æ–≥—ñ–∫–∞ –∫–ª–µ–π–º—É —Ç–µ–ø–µ—Ä –ø–æ–≤–Ω—ñ—Å—Ç—é —É MainLayout)
  };

  const progressColor =
    progress < 0.7
      ? "#00eaff"
      : progress < 0.95
      ? "#00ff99"
      : "#ff00ff";

  return (
    <div className={styles.container}>
      <div className={styles.Card}>
        <header className={styles.header}>
          <h1 className={styles.title}>SPACE CLICKER</h1>
          <div className={styles.userIcon}>
            <button width="24px" height="24px" className={styles.btnProfile} onClick={() => setProfileOpen(true)}><FaUserCircle className={styles.userIcon} /></button>
            <ProfileModal isOpen={profileOpen} onClose={() => setProfileOpen(false)} /> 
          </div>
        </header>

        {/* 4. üü¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 'balance' –∑ MainLayout */}
        <div className={styles.balance}>{balance.toLocaleString("en-US")} ‚òÖ</div>

        <TapButton isTapped={isTapped} onClick={handleTapWithAnimation} />

        <div
          className={styles.progressSection}
          // 5. üü¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 'ticketReady' –∑ MainLayout
          onClick={() => ticketReady && handleClaimTicket()}
          style={{ cursor: ticketReady ? "pointer" : "default" }}
        >
          <span className={styles.progressLabel}>PROGRESS</span>
          <div className={styles.progressBar}>
            <div
              className={styles.progressFill}
              style={{
                // 6. üü¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 'progress' –∑ MainLayout
                width: `${Math.min(progress * 100, 100)}%`,
                backgroundColor: progressColor,
                boxShadow:
                  progress >= 0.95
                    ? `0 0 20px ${progressColor}, 0 0 40px ${progressColor}`
                    : "none",
                transition: "all 0.3s ease-in-out",
              }}
            ></div>
          </div>
        </div>

        <Link to="/boosters" className={styles.boostersButton}>
          <FiZap /> Boosters
        </Link>
      </div>

      {floatingNumbers.map((num) => (
        <div
          key={num.id}
          className={styles.floatingNumber}
          style={{ left: `${num.x}px`, top: `${num.y}px` }}
        >
          +{num.value}
        </div>
      ))}
    </div>
  );
}



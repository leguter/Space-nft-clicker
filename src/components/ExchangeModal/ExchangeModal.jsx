// –¶–µ —Ç–≤—ñ–π React-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ /pages/ExchangePage.js

import { useState } from "react";
import api from "../../utils/api"; // –¢–≤—ñ–π —Ñ–∞–π–ª –¥–ª—è API-–∑–∞–ø–∏—Ç—ñ–≤
import styles from "./ExchangeModal.module.css"; // –¢–≤–æ—ó —Å—Ç–∏–ª—ñ

// –û–ø—Ü—ñ—ó –¥–ª—è –æ–±–º—ñ–Ω—É
const exchangeOptions = [
  { stars: 100, clicks: 100000 },
  { stars: 250, clicks: 250000 },
  { stars: 500, clicks: 500000 },
  { stars: 1000, clicks: 1000000 },
  { stars: 2500, clicks: 2500000 },
  { stars: 10000, clicks: 10000000 },
  { stars: 50000, clicks: 50000000 },
];

export default function ExchangePage() {
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState(""); // –î–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ —É—Å–ø—ñ—Ö –∞–±–æ –ø–æ–º–∏–ª–∫—É

  // === üü¢ –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø, –Ø–ö–£ –¢–†–ï–ë–ê –í–ò–ü–†–ê–í–ò–¢–ò ===
  const handleExchange = async (stars, clicks) => {
    setLoading(true);
    setMessage(""); // –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    try {
      // –†–æ–±–∏–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Ç–æ–π —Å–∞–º–∏–π —Ä–æ—É—Ç, —â–æ –π —É –±–µ–∫–µ–Ω–¥—ñ
      const res = await api.post("/api/withdraw/exchange", { stars, clicks });

      // –Ø–∫—â–æ –±–µ–∫–µ–Ω–¥ –ø–æ–≤–µ—Ä–Ω—É–≤ success: true
      if (res.data.success) {
        setMessage(res.data.message); // –ü–æ–∫–∞–∂–µ–º–æ "‚úÖ –û–±–º—ñ–Ω —É—Å–ø—ñ—à–Ω–∏–π!"
        // –¢—É—Ç –º–æ–∂–Ω–∞ —Ç–∞–∫–æ–∂ –æ–Ω–æ–≤–∏—Ç–∏ –±–∞–ª–∞–Ω—Å —é–∑–µ—Ä–∞, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
      } else {
        // –¶–µ –¥–ª—è "–º'—è–∫–∏—Ö" –ø–æ–º–∏–ª–æ–∫ (—è–∫—â–æ –±–µ–∫–µ–Ω–¥ –∑–∞–±—É–≤ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ .status(400))
        setMessage(`‚ö†Ô∏è ${res.data.message}`);
      }
    } catch (err) {
      
      // === üü¢ –û–°–¨ –¢–£–¢ –ë–£–õ–ê –ü–û–ú–ò–õ–ö–ê ===
      // 'err' - —Ü–µ –æ–±'—î–∫—Ç –ø–æ–º–∏–ª–∫–∏ –≤—ñ–¥ Axios
      
      console.error("Exchange error:", err); // –õ–æ–≥ –¥–ª—è —Ç–µ–±–µ

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —É –ø–æ–º–∏–ª—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞ (err.response)
      // —ñ —á–∏ —î –≤ –Ω—ñ–π –Ω–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (err.response.data.message)
      if (err.response && err.response.data && err.response.data.message) {
        // ‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ö–û–ù–ö–†–ï–¢–ù–ï –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –±–µ–∫–µ–Ω–¥—É
        // (–Ω–∞–ø—Ä, "‚ùó –î–ª—è –æ–±–º—ñ–Ω—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –º–∞—Ç–∏ –º—ñ–Ω—ñ–º—É–º 5 —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤")
        setMessage(`‚ö†Ô∏è ${err.response.data.message}`);
      } else {
        // ‚ùå –¶–µ —Ç–≤—ñ–π —Å—Ç–∞—Ä–∏–π –∫–æ–¥, —è–∫–∏–π –ø–æ–∫–∞–∑—É–≤–∞–≤ –∑–∞–≥–∞–ª—å–Ω—É –ø–æ–º–∏–ª–∫—É
        setMessage("‚ö†Ô∏è Error creating application");
      }
      
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className={styles.container}>
      {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è */}
      <div className={styles.header}>
        <h2 className={styles.title}>–û–±–º—ñ–Ω –∫–ª—ñ–∫—ñ–≤ –Ω–∞ –∑—ñ—Ä–∫–∏</h2>
        <button className={styles.closeButton}>√ó</button>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –æ–ø—Ü—ñ–π */}
      <div className={styles.optionsList}>
        {exchangeOptions.map((option) => (
          <div key={option.stars} className={styles.optionItem}>
            <div className={styles.starsValue}>
              ‚≠ê {option.stars.toLocaleString()} Stars
            </div>
            
            <button
              className={styles.exchangeButton}
              onClick={() => handleExchange(option.stars, option.clicks)}
              disabled={loading} // –ë–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫—É –ø—ñ–¥ —á–∞—Å –∑–∞–ø–∏—Ç—É
            >
              {option.clicks.toLocaleString()} –∫–ª—ñ–∫—ñ–≤
            </button>
          </div>
        ))}
      </div>

      {/* –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É/—É—Å–ø—ñ—Ö */}
      {/* –¶–µ–π –±–ª–æ–∫ –±—É–¥–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, 
        —è–∫–µ –º–∏ –≤—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —É 'handleExchange'
      */}
      {message && (
        <div 
          className={message.includes("‚úÖ") ? styles.messageSuccess : styles.messageError}
        >
          {message}
        </div>
      )}
    </div>
  );
}
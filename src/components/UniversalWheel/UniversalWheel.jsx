import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { motion } from "framer-motion";
import api from "../../utils/api";
import styles from "./UniversalWheel.module.css";

// ‚ùóÔ∏è –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –ì–µ–Ω–µ—Ä—É—î "cache buster" (—É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä),
// —â–æ–± –∑–∞–ø–∏—Ç–∏ GET –Ω–µ –∫–µ—à—É–≤–∞–ª–∏—Å—è
const noCache = () => `?_=${new Date().getTime()}`;

export default function UniversalWheel({ mode = "paid" }) {
  const [spinning, setSpinning] = useState(false);
  const [result, setResult] = useState(null);
  const [balance, setBalance] = useState(0);
  const [availableSpins, setAvailableSpins] = useState(0);
  const [canSpin, setCanSpin] = useState(true);
  const [nextSpinTime, setNextSpinTime] = useState(null);
  const [offset, setOffset] = useState(0);
  const [transition, setTransition] = useState({ duration: 0, ease: "easeOut" });

  const navigate = useNavigate();
  const spinCost = 10;

  // === –°–µ–≥–º–µ–Ω—Ç–∏ (–±–µ–∑ –∑–º—ñ–Ω) ===
  const getSegments = () => {
    if (mode === "paid") {
      return [
        { label: "üéü Ticket", type: "raffle_ticket", image: "/images/ticket.png" },
        { label: "Calendar", type: "nft", image: "/images/calendar.jpg", stars: 1200 },
        { label: "üéü Ticket", type: "raffle_ticket", image: "/images/ticket.png" },
        { label: "üåü 5 Stars", type: "stars", stars: 5, image: "/images/5stars.png" },
        { label: "üöÄ Boost", type: "boost", image: "/images/boost.png" },
        { label: "Swiss Watch", type: "nft", image: "/images/swisswatch.jpg", stars: 5500 },
      ];
    }
    if (mode === "daily") {
      return [
        { label: "üéü Ticket", type: "raffle_ticket", image: "/images/ticket.png" },
        { label: "üåü 3 Stars", type: "stars", stars: 3, image: "/images/3stars.png" },
        { label: "üßß Bonus Box", type: "nft", image: "/images/bonusbox.jpg", stars: 200 },
        { label: "üöÄ Boost", type: "boost", image: "/images/boost.png" },
      ];
    }
    if (mode === "referral") {
      return [
        { label: "üéü Ticket", type: "raffle_ticket", image: "/images/ticket.png" },
        { label: "Calendar", type: "nft", image: "/images/calendar.jpg", stars: 1200 },
        { label: "üéü Ticket", type: "raffle_ticket", image: "/images/ticket.png" },
        { label: "üåü 5 Stars", type: "stars", stars: 5, image: "/images/5stars.png" },
        { label: "üöÄ Boost", type: "boost", image: "/images/boost.png" },
        { label: "Swiss Watch", type: "nft", image: "/images/swisswatch.jpg", stars: 5500 },
      ];
    }
    return [];
  };

  const segments = getSegments();
  const segmentWidth = 160;
  const totalSegments = segments.length;
  const wheelCycleLength = totalSegments * segmentWidth;
  const centeringOffset = segmentWidth / 2;

  // ‚ùóÔ∏è –†–ï–§–ê–ö–¢–û–†: –û–∫—Ä–µ–º–∏–π useEffect –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É (–∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è 1 —Ä–∞–∑)
  useEffect(() => {
    if (mode === "paid") {
      (async () => {
        try {
          // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ–π —Å–∞–º–∏–π 'api.get'
          const res = await api.get("/api/user/me", {
            headers: { Authorization: `Bearer ${localStorage.getItem("authToken")}` },
          });
          setBalance(res.data.internal_stars || 0);
        } catch (err) {
          console.error("Paid balance fetch error:", err);
        }
      })();
    }
  }, [mode]);

  // ‚ùóÔ∏è –†–ï–§–ê–ö–¢–û–†: –û–±'—î–¥–Ω–∞–Ω–∏–π useEffect –¥–ª—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è (polling)
  useEffect(() => {
    // –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å—Ç–∞—Ç—É—Å
    const fetchWheelStatus = async () => {
      try {
        if (mode === "daily") {
          const res = await api.get(`/api/wheel/daily_status${noCache()}`);
          setCanSpin(res.data.daily_available);
          setNextSpinTime(res.data.next_spin_time || null);
        }
        if (mode === "referral") {
          const res = await api.get(`/api/wheel/referral_status${noCache()}`);
          setAvailableSpins(res.data.referral_spins || 0);
        }
      } catch (err) {
        console.error("Wheel status update error:", err);
      }
    };

    // 1. –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–¥—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    fetchWheelStatus();

    // 2. –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª
    const interval = setInterval(fetchWheelStatus, 5000);

    // 3. –û—á–∏—â—É—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ
    return () => clearInterval(interval);
    
  }, [mode]); // –¶–µ–π –µ—Ñ–µ–∫—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è, —è–∫—â–æ 'mode' –∑–º—ñ–Ω–∏—Ç—å—Å—è

  // === –û–±–µ—Ä—Ç–∞–Ω–Ω—è –∫–æ–ª–µ—Å–∞ (–±–µ–∑ –∑–º—ñ–Ω) ===
  const spinToReward = (rewardType) => {
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ *–ø–µ—Ä—à–∏–π* —ñ–Ω–¥–µ–∫—Å, —â–æ –∑–±—ñ–≥–∞—î—Ç—å—Å—è. –¶–µ –≤–∞–∂–ª–∏–≤–æ.
    const winningIndex = segments.findIndex((s) => s.type === rewardType);
    if (winningIndex === -1) {
       console.error(`Could not find segment with type: ${rewardType}`);
       // –ê–≤–∞—Ä—ñ–π–Ω–∞ –∑—É–ø–∏–Ω–∫–∞, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞—Å—Ç—Ä—è–≥
       setSpinning(false); 
       return;
    }

    const targetPosition = winningIndex * -segmentWidth + centeringOffset;
    const currentBaseOffset = offset % wheelCycleLength;
    const randomTurns = 4 + Math.floor(Math.random() * 3);
    const finalOffset = offset + (targetPosition - currentBaseOffset) - wheelCycleLength * randomTurns;

    setTransition({ duration: 4, ease: "easeOut" });
    setResult(null);
    setOffset(finalOffset);

    setTimeout(() => {
      setSpinning(false);
      setResult(segments[winningIndex]);
    }, 4500);
  };

  // ‚ùóÔ∏è –†–ï–§–ê–ö–¢–û–†: –û–±—Ä–æ–±–∫–∞ —Å–ø—ñ–Ω—É —Ç–µ–ø–µ—Ä –∫–æ—Ä–µ–∫—Ç–Ω–æ –æ–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω
  const handleSpin = async () => {
    if (spinning) return;
    setSpinning(true);
    setResult(null); // –ó–∞–≤–∂–¥–∏ –æ—á–∏—â—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–¥ —Å–ø—ñ–Ω–æ–º

    try {
      let data;

      if (mode === "paid") {
        if (balance < spinCost) {
          navigate("/deposit");
          setSpinning(false);
          return;
        }
        const res = await api.post("/api/wheel/spin");
        data = res.data;
        // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–µ—Ä–≤–µ—Ä–∞ (—Ü–µ —É –≤–∞—Å –±—É–ª–æ)
        if (data.new_internal_stars !== undefined) {
            setBalance(data.new_internal_stars);
        }
      }

      if (mode === "daily") {
        const res = await api.post("/api/wheel/daily_spin");
        data = res.data;
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–µ—Ä–≤–µ—Ä–∞ (—Ü–µ —É –≤–∞—Å –±—É–ª–æ)
        setCanSpin(false);
        setNextSpinTime(data.next_spin_time || null);
      }

      if (mode === "referral") {
        const res = await api.post("/api/wheel/referral_spin");
        data = res.data;
        
        // ‚ùóÔ∏è –û–°–¨ –¢–£–¢ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø:
        // –ú–∏ –±–µ—Ä–µ–º–æ –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Å–ø—ñ–Ω—ñ–≤ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–µ—Ä–≤–µ—Ä–∞,
        // –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–Ω—ñ–º–∞—î–º–æ 1.
        if (data.referral_spins !== undefined) {
          setAvailableSpins(data.referral_spins);
        } else {
          // –ê–≤–∞—Ä—ñ–π–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç, —è–∫—â–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–ø—Ç–æ–º –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤
          setAvailableSpins((prev) => Math.max(prev - 1, 0));
        }
      }

      // –ó–∞–≥–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
      if (!data.success) {
        // –Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ { success: false, message: "..." }
        throw new Error(data.message || "Spin request failed");
      }
      
      if (data.result && data.result.type) {
        spinToReward(data.result.type);
      } else {
        // –Ø–∫—â–æ —Å–ø—ñ–Ω –Ω–µ –≤–¥–∞–≤—Å—è (–Ω–∞–ø—Ä, 'no spins left' –æ–±—ñ–π—à–æ–≤ 'disabled')
        setSpinning(false);
      }

    } catch (err) {
      console.error("Spin error:", err);
      setSpinning(false);
    }
  };

  // === –ê–Ω—ñ–º–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–±–µ–∑ –∑–º—ñ–Ω) ===
  const handleAnimationComplete = () => {
    if (transition.duration === 0) return;
    const currentBaseOffset = offset % wheelCycleLength;
    setTransition({ duration: 0 });
    setOffset(currentBaseOffset);
  };

  // === –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–ø—ñ–Ω—É (–±–µ–∑ –∑–º—ñ–Ω) ===
  const renderSpinButton = () => {
    if (mode === "paid") return spinning ? "Spinning..." : `Spin for ${spinCost} ‚≠ê`;
    if (mode === "daily")
      return spinning
        ? "Spinning..."
        : canSpin
        ? "Spin Free"
        : `Next spin: ${nextSpinTime ? new Date(nextSpinTime).toLocaleTimeString() : "‚Äî"}`;
    if (mode === "referral")
      return spinning ? "Spinning..." : availableSpins > 0 ? `Spin (${availableSpins})` : "No spins left";
  };

  // === –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–±–µ–∑ –∑–º—ñ–Ω) ===
  const getTitle = () => {
    if (mode === "paid") return "üé° Paid Wheel";
    if (mode === "daily") return "üéÅ Daily Wheel";
    if (mode === "referral") return "ü§ù Referral Wheel";
  };

  // === JSX (–±–µ–∑ –∑–º—ñ–Ω) ===
  return (
    <div className={styles.container}>
      <h2>{getTitle()}</h2>

      {mode === "paid" && (
        <div className={styles.balanceDisplay} onClick={() => navigate("/deposit")}>
          Your Balance: {balance} ‚≠ê <span className={styles.depositIcon}>+</span>
        </div>
      )}

      <div className={styles.wheelWrapper}>
        <motion.div
          className={styles.wheel}
          animate={{ x: offset }}
          transition={transition}
          onAnimationComplete={handleAnimationComplete}
        >
          {[...Array(8)].flatMap((_, i) =>
            segments.map((seg, idx) => (
              <div
                key={`${i}-${idx}`}
                className={styles.segment}
                style={{
                  background: seg.image ? `url(${seg.image}) center/cover no-repeat` : seg.color,
                }}
              ></div>
            ))
          )}
        </motion.div>
        <div className={styles.marker}>‚ñº</div>
      </div>

      <button
        onClick={handleSpin}
        disabled={
          spinning ||
          (mode === "daily" && !canSpin) ||
          (mode === "referral" && availableSpins <= 0)
        }
        className={styles.spinButton}
      >
        {renderSpinButton()}
      </button>

      {result && (
        <div className={styles.result}>
          üéâ You won: <strong>{result.label}</strong>
        </div>
      )}

      <h2 className={styles.sectionTitle}>CASE CONTENTS</h2>
      <div className={styles.itemsGrid}>
        {segments.map((item, index) => (
          <div key={index} className={styles.itemCard}>
            <div className={styles.itemImageWrapper}>
              <img
                src={item.image || "/images/placeholder.png"}
                alt={item.label}
                className={styles.itemImage}
                width="48"
                height="48"
              />
            </div>
            <div className={styles.itemDetails}>
              <p className={styles.itemName}>{item.label}</p>
              {item.stars ? (
                <div className={styles.itemStars}>
                  {item.stars} <span className={styles.rotatingStar}>‚≠êÔ∏è</span>
                </div>
              ) : (
                <div className={styles.itemStars}></div>
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}